function laravel_patch_auth --description "🔑 patches vendor auth for easy local login"
    set -l target_file ./vendor/laravel/ui/auth-backend/AuthenticatesUsers.php

    if not test -f $target_file
        echo (set_color red)"ERR: target file not found at '$target_file'."(set_color normal)
        return 1
    end

    echo "patching AuthenticatesUsers trait in $target_file..."

    # base64 encoded to prevent shell quoting issues
    set -l b64_content '
'
    # decode and overwrite the target file, assumes base64 command is available (unix)
    if string length -q -- $b64_content
        echo $b64_content | base64 --decode >$target_file
        echo (set_color green)"patched ૮ • ﻌ - ა"(set_color normal)
        return 0
    else
        echo (set_color red)"ERR: embeded content is empty."(set_color normal)
        return 1
    end
end
